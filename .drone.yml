kind: pipeline
name: sanskrit-parser-api

steps:
  
## activate tests in future  
# - name: sanskrit-parser-api - test
#   image: node:14-alpine
#   commands:
#   - yarn install
#   - yarn test
#   when:
#     branch:
#     - docker

# For Custom Docker Registry
- name: sanskrit-parser-api - build docker image
  image: docker:latest
  volumes:
    - name: docker_sock
      path: /var/run/docker.sock
  environment:
    DUSER:
      from_secret: docker_user
    DPASS:
      from_secret: docker_pass
    SERVER_DOMAIN:
      from_secret: server_domain
  commands:
    - docker login -p $DPASS -u $DUSER docker.$SERVER_DOMAIN
    - docker build --no-cache -t docker.$SERVER_DOMAIN/home/sanskrit-parser-api:latest -f Dockerfile.api .
    - docker push docker.$SERVER_DOMAIN/home/sanskrit-parser-api:latest
  when:
    branch:
    - docker

## Following works when publishing from root of the repository
# - name: build plugins/docker image
#   image: plugins/docker
#   settings:
#     tags:
#       - latest
#     # dockerfile: sanskrit-parser-api/Dockerfile
#     repo: test/sanskrit-parser-api
#     registry: registry.unraid:33294
#     insecure: true

- name: sanskrit-parser-api - deploy
  image: sinlead/drone-kubectl
  settings:
    kubernetes_server:
      from_secret: k8s_server
    kubernetes_cert:
      from_secret: k8s_cert
    kubernetes_token:
      from_secret: k8s_token
  environment:
    CLUSTER_DOMAIN:
      from_secret: cluster_domain
    SERVER_DOMAIN:
      from_secret: server_domain      
  commands:
    - sed -i "s/{{cluster_domain}}/$CLUSTER_DOMAIN/g"  ./k8s/deployment.yaml
    - sed -i "s/{{server_domain}}/$SERVER_DOMAIN/g"  ./k8s/deployment.yaml
    - kubectl apply -f k8s/deployment.yaml --insecure-skip-tls-verify
    - kubectl rollout restart deployment/sanskrit-parser-api --insecure-skip-tls-verify
  when:
    branch:
    - docker

# Finally common tasks for all steps
- name: notify
  image: plugins/slack
  settings:
    channel: pipelines
    webhook:
      from_secret: pipeline_notifier
    icon_url: https://unsplash.it/48/48/?random
    # image_url: https://unsplash.it/256/256/?random
    template: >
      {{#if build.pull }}
        *{{#success build.status}}✔{{ else }}✘{{/success}} {{ uppercasefirst build.status }}*: <https://github.com/{{ repo.owner }}/{{ repo.name }}/pull/{{ build.pull }}|Pull Request #{{ build.pull }}>
      {{else}}
        *{{#success build.status}}✔{{ else }}✘{{/success}} {{ uppercasefirst build.status }}: Build #{{ build.number }}* (type: `{{ build.event }}`)
      {{/if}}
      Commit: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commit/{{ build.commit }}|{{ truncate build.commit 8 }}>
      Branch: <https://github.com/{{ repo.owner }}/{{ repo.name }}/commits/{{ build.branch }}|{{ build.branch }}>
      Author: {{ build.author }}
      <{{ build.link }}|Visit build page ↗>
  when:
    status: [ success, failure ]

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock